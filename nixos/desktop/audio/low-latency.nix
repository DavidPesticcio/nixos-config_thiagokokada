# Adapted from:
# https://github.com/NixOS/nixpkgs/commit/3f86bd950c39cbbe02c0b8b2d67c5a8026bba445

{ config, lib, pkgs, ... }:
let
  cfg = config.nixos.desktop.audio.low-latency;
  qr = "${toString cfg.quantum}/${toString cfg.rate}";
in
{
  options.nixos.desktop.audio.low-latency = {
    enable = lib.mkEnableOption "low latency audio" // {
      default = config.nixos.games.enable;
    };

    quantum = lib.mkOption {
      description = lib.mdDoc "Minimum quantum to set";
      type = lib.types.int;
      default = 64;
      example = 32;
    };

    rate = lib.mkOption {
      description = lib.mdDoc "Rate to set";
      type = lib.types.int;
      default = 48000;
      example = 96000;
    };
  };
  config = lib.mkIf cfg.enable {
    services.pipewire = {
      # make sure PipeWire is enabled if the module is imported
      # and low latency is enabledd
      enable = true;

      # write extra config
      extraConfig.pipewire = {
        "99-lowlatency" = {
          context = {
            properties.default.clock.min-quantum = cfg.quantum;
            modules = [
              {
                name = "libpipewire-module-rtkit";
                flags = [ "ifexists" "nofail" ];
                args = {
                  nice.level = -15;
                  rt = {
                    prio = 88;
                    time.soft = 200000;
                    time.hard = 200000;
                  };
                };
              }
              {
                name = "libpipewire-module-protocol-pulse";
                args = {
                  server.address = [ "unix:native" ];
                  pulse.min = {
                    req = qr;
                    quantum = qr;
                    frag = qr;
                  };
                };
              }
            ];

            stream.properties = {
              node.latency = qr;
              resample.quality = 1;
            };
          };
        };
      };

      # ensure WirePlumber is enabled explicitly (defaults to true while PW is enabled)
      # and write extra config to ship low latency rules for alsa
      wireplumber = {
        enable = true;
        configPackages =
          let
            # generate "matches" section of the rules
            matches = lib.generators.toLua
              {
                multiline = false; # looks better while inline
                indent = false;
              } [ [ [ "node.name" "matches" "alsa_output.*" ] ] ]; # nested lists are to produce `{{{ }}}` in the output

            # generate "apply_properties" section of the rules
            apply_properties = lib.generators.toLua { } {
              "audio.format" = "S32LE";
              "audio.rate" = cfg.rate * 2;
              "api.alsa.period-size" = 2;
            };
          in
          [
            (pkgs.writeTextDir "share/lowlatency.lua.d/99-alsa-lowlatency.lua" ''
              -- Generated by nix-gaming
              alsa_monitor.rules = {
                {
                  matches = ${matches};
                  apply_properties = ${apply_properties};
                }
              }
            '')
          ];
      };
    };
  };
}
